#include "Animation.hpp"
#include "Knight.hpp"
#include "Tilemap.hpp"
#include "Tile.hpp"
#include "wolf.hpp"
#include "Enemy.hpp"
#include "Skeleton.hpp"
#include "Arrow.hpp"
#include "Dragon.hpp"


enum class gameState
{
    mainMenu,
    playing,
    paused,
    gameOver


};

int main()
{
    std::srand(std::time(0));

    gameState gameState = gameState::playing;

    sf::RenderWindow window(sf::VideoMode({ 1920, 1080 }), "Knight Game", sf::Style::Default);

  

    sf::View view(sf::FloatRect({ 0, 0 }, { 1920, 1080 }));

    view.setSize({ 1920, 1080 });

    int windowWidth = 1920;
    int windowHeight = 1080;
    const float margin = 200.f;
   
    window.setFramerateLimit(60);
    sf::Clock clock;

    sf::Texture text;
    if (!text.loadFromFile("Knight_1/Idle.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture text2;
    if (!text2.loadFromFile("Knight_1/Walk.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture text3;
    if (!text3.loadFromFile("Knight_1/Jump.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture attack1;
    if (!attack1.loadFromFile("Knight_1/Attack 1.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture attack2;
    if (!attack2.loadFromFile("Knight_1/Attack 2.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture attack3;
    if (!attack3.loadFromFile("Knight_1/Attack 3.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture run;
    if (!run.loadFromFile("Knight_1/Run.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture shield;
    if (!shield.loadFromFile("Knight_1/Defend.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture runningAttack;
    if (!runningAttack.loadFromFile("Knight_1/Run+Attack.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture hurt;
    if (!hurt.loadFromFile("Knight_1/hurt.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture knightDead;
    if (!knightDead.loadFromFile("Knight_1/Dead.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture knightHanging;
    if (!knightHanging.loadFromFile("Knight_1/Hang.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }


    sf::Texture knightClimbing;
    if (!knightClimbing.loadFromFile("Knight_1/Pull_up.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture knightRolling;
    if (!knightRolling.loadFromFile("Knight_1/Roll.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }


    sf::Texture background;
    if (!background.loadFromFile("origbig.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture trees;
    if (!trees.loadFromFile("tileset/tree.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture rosebush;
    if (!rosebush.loadFromFile("tileset/bush.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture bush;
    if (!bush.loadFromFile("tileset/grass.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture enemy;
    if (!enemy.loadFromFile("wolf/walk.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture enemyAttack1;
    if (!enemyAttack1.loadFromFile("wolf/attack_1.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture enemyAttack2;
    if (!enemyAttack2.loadFromFile("wolf/attack_2.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture enemyAttack3;
    if (!enemyAttack3.loadFromFile("wolf/attack_3.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dead;
    if (!dead.loadFromFile("wolf/dead.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture wolfHurt;
    if (!wolfHurt.loadFromFile("wolf/hurt.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture SkeletonIdle;
    if (!SkeletonIdle.loadFromFile("Skeleton_Archer/Idle.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture SkeletonShot1;
    if (!SkeletonShot1.loadFromFile("Skeleton_Archer/Shot_2.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture arrow;
    if (!arrow.loadFromFile("Skeleton_Archer/Arrow.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture skeletonHurt;
    if (!skeletonHurt.loadFromFile("Skeleton_Archer/Hurt.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture skeletonDead;
    if (!skeletonDead.loadFromFile("Skeleton_Archer/Dead.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonIdle;
    if (!dragonIdle.loadFromFile("Dragon/Idle.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonWalk;
    if (!dragonWalk.loadFromFile("Dragon/Walk.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonAttack2;
    if (!dragonAttack2.loadFromFile("Dragon/Attack_2.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonRise;
    if (!dragonRise.loadFromFile("Dragon/Rise.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonFlight;
    if (!dragonFlight.loadFromFile("Dragon/Flight.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonSpecial;
    if (!dragonSpecial.loadFromFile("Dragon/Special.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonLanding;
    if (!dragonLanding.loadFromFile("Dragon/Landing.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonHurt;
    if (!dragonHurt.loadFromFile("Dragon/Hurt.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }

    sf::Texture dragonDead;
    if (!dragonDead.loadFromFile("Dragon/Dead.png"))
    {
        std::cout << "error loading the knight protect sprite" << std::endl;
    }


    sf::SoundBuffer wolfHurtSound1;
    sf::SoundBuffer wolfHurtSound2;
    sf::SoundBuffer wolfDeathSound;

    background.setRepeated(true);
    sf::RectangleShape backgroundShape(sf::Vector2f(windowWidth, windowHeight));
    backgroundShape.setTexture(&background);

    sf::Vector2f characterPosition(windowWidth / 2.f, windowHeight / 2.f);

    view.setCenter({ windowWidth / 2.f, windowHeight / 2.f });

   
    sf::RectangleShape player(sf::Vector2f(50, 50));
    player.setFillColor(sf::Color::Red);
    player.setOrigin({ 25, 25 });

    float worldWidth = 50000.f;

    sf::Sprite town(background);
    town.setScale({ 0.9,0.9 });
    town.setPosition({ 0, -50 });
    
    
    
    Knight knight(text2, text, text3, attack1, attack2, attack3, run, shield, runningAttack, hurt, knightDead, knightHanging, knightClimbing, knightRolling);

    std::vector<std::unique_ptr<Enemy>> enemies;
    std::vector<Arrow> arrows;

  
enemies.emplace_back(std::make_unique<Skeleton>(SkeletonIdle, SkeletonShot1, arrow, skeletonHurt, skeletonDead, 5560.f, 1825.f,2));
enemies.emplace_back(std::make_unique<wolf>(enemy, enemyAttack1, enemyAttack2, enemyAttack3, dead, wolfHurt, wolfHurtSound1, wolfHurtSound2, wolfDeathSound, 3500.f, 2115.f));
enemies.emplace_back(std::make_unique<wolf>(enemy, enemyAttack1, enemyAttack2, enemyAttack3, dead, wolfHurt, wolfHurtSound1, wolfHurtSound2, wolfDeathSound, 2500.f, 1635.f));
enemies.emplace_back(std::make_unique<Skeleton>(SkeletonIdle, SkeletonShot1, arrow, skeletonHurt, skeletonDead, 7892.f, 1060.f,1));
enemies.emplace_back(std::make_unique<wolf>(enemy, enemyAttack1, enemyAttack2, enemyAttack3, dead, wolfHurt, wolfHurtSound1, wolfHurtSound2, wolfDeathSound, 7300.f, 1346.f));
 enemies.emplace_back(std::make_unique<wolf>(enemy, enemyAttack1, enemyAttack2, enemyAttack3, dead, wolfHurt, wolfHurtSound1, wolfHurtSound2, wolfDeathSound, 7200.f, 100.f));
enemies.emplace_back(std::make_unique<wolf>(enemy, enemyAttack1, enemyAttack2, enemyAttack3, dead, wolfHurt, wolfHurtSound1, wolfHurtSound2, wolfDeathSound, 9000.f, 100.f));

 enemies.emplace_back(std::make_unique<Dragon>(dragonIdle, dragonWalk, dragonAttack2, dragonRise, dragonFlight, dragonSpecial, dragonLanding, dragonHurt, dragonDead, 14000.f, 100.f));

    sf::Texture tileSet;

    tileSet.loadFromFile("tileset/tilesetgrass.png");

    sf::Vector2u tileSize(32, 32);

    std::vector<Tile> tiles;

    std::vector<std::vector<int>> mapData = {

        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,                   0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,1,2,-1,-1,-1,-1,-1,-1,0,1,1,1,1,35,11,11,11,34,1,1,1,1,1,1,1,1,1,1,                                   2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,34,1,1,1,1,1,1,1,1,1,1,35,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,34,                  1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,2,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,         12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,35,34,1,1,2,-1,-1,-1,-1,-1,20,21,21,25,24,21,21,21,21,21,21,21,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,         12,-1,-1,-1,-1,-1,-1,0,1,1,2,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},
         { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,34,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,20,22,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,         12,-1,-1,-1,-1,-1,-1,10,11,11,12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},//
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,35,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,       12,-1,-1,-1,-1,-1,-1,10,11,1,1,1,2,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},//
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,     12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11},//
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,34,1,1,1,1,1,1,1,1,1,2,-1,-1,0,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,                   12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,24,21,22,-1,-1,0,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,21,21,25,11,11,11,11,11,11,11,11,11,11,11,11,           12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,20,25,11,11,11,11,11,11,11,24,21,21,21,21,21,21,21,21,21,21,21,22},
         { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,20,21,21,21,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,11,11,11,    24,22,-1,-1,-1,-1,-1,-1,10,11,11,34,1,1,   2,-1,-1,-1,10,11,11,11,11,24,21,21,22},//
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,35,24,21,21,21,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,11,11,11,11,11,11,             12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,10,11,24,21,21,22},
        { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,24,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,        12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,10,11,12},
           { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,34,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,25,24,22,-1,-1,-1,-1,30,31,32,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,     12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,0,1,1,12},
           { -1,-1,-1,0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,24,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,2,-1,-1,-1,-1,20,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,          12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,20,21,21,22},
           { -1,0,1,35,34,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,35,11,11,11,34,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,11,11,11,11,11,11,               12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
           { 1,35,24,21,21,21,25,34,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,35,11,11,11,11,11,11,34,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20,21,25,11,11,11,11,11,11,11,11,      12,-1,-1,-1,-1,-1,-1,-1,10,11,34,1,1,1,    2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    0,1,1,1,2},
           { 24,21,22,-1,-1,-1,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,-1,-1,0,1,1,1,1,1,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,                             12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    10,11,11,11,12},
           { 12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,12,-1,-1,20,25,11,11,11,11,11,11,11,11,34,2,-1,-1,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,                      12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    10,11,11,11,12},
           { 1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1 -1 -1 -1 -1 -1 -1,-1, -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,-1,-1,-1,0,1,35,12,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,34,1,1,1,35,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,34,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,         0,35,11,11,11,12,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2},
           { 11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,-1,-1,-1,0,1,1,1,1,2,-1,-1,-1,10,34,1,2,-1,-1,-1,20,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,35,11,11,11,11,11,11,11,11,11,11,11,                                                       12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,   10,11,11,11,11,12,-1,-1,-1,-1,-1,20,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,24,22},
           { 11,34,1,1,1,1,1,1,1,1,1,1,1,35,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,1,2,-1,-1,-1,10,1,1,1,1,1,2,-1,-1,10,11,24,22,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,                       12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,34,1,1,1,1,1,1,1,1,1,1,1,1,1,1,35,11,12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12},
           {11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,-1,-1,10,11,11,12,-1,-1,-1,10,11,11,11,11,11,12,-1,-1,10,11,12,-1,-1,-1,-1,0,1,1,1,1,1,1,35,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,                                          12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12},
           {11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,1,1,1,2,-1,10,11,11,12,-1,-1,-1,0,1,1,1,1,35,12,-1,-1,0,1,2,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,                12,-1,-1,-1,-1,-1,-1,-1,10,11,11,34,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12},
           {21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,11,12,-1-1,10,11,11,12,-1,-1,-1,10,11,11,11,11,11,12,-1,-1,10,11,12,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11, 12,-1,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,-1,-1,-1,-1,-1,-1,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12}
    };

    std::vector<std::vector<int>> decorationData =
    {
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,4,1,2,3,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,3,1,5,3,4,2,1,3,2,3,2,2,3},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,2,3,3,3,2,-1,-1,-1,-1,-1,-1,-1,-1,3,2,3,3,-1,-1,-1,-1,-1,1,2,4,3,3,0,2,3,3},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,2,2,3,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,4,3},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0},
        {-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,4,3,5,2,3,3,0,2,3,-1,1,2,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,1,4,3,2,3,5,3,4,2,2},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,5,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},

        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0},
        {-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,4,2,3},
        {-1,4,-1,-1,-1,1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3},
        {3,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,5,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,5,2},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,3,2,2,3,1,2,3,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,3,-1,-1,-1,2,3,2,0,2,3,3,2,3,2},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,3,1,3,3,2,2,5,3,2,3},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,4,3,1,2,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,0,-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,4,3,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,2,3,3,2,1,3,3,4,2,3,2,2,5,3,3,4,1},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,3,3,2,2,2,3,2,2,2,3,1,3,3,2,4,3,2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,3,-1,-1,-1,4,1,2,3,2,-1,-1,-1,-1,-1,-1,0,3,-1,-1,-1,-1,2,3,3,0,2,1,2,2,3,3,3,2,3,3,3,2,2,3,3,2,2,2},
        {-1,-1,3,5,-1,2,3,2,2,2,0,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,2,2,-1,-1,-1,-1,-1,2,2,3,3,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,4,3,2,3,5},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,2,3,-1,2,1,3,0,2,-1,3,4,3,2,3,1,2,3,3,2,3,0,2,2,5,3,2,3,2,4},
        {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,3,3,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,2,4,3,2,3,3,2,2,3,2,3,2,2,2,3,2,1}


    };

    sf::Vector2u treeSize(96, 96);

    knight.loadTileMap(tileSet, mapData, tileSize, tiles);

    knight.loadDecorationMap(trees, bush, rosebush, decorationData, treeSize, tileSize);

   
    float knightOffset = 300.f;
    float lerpSpeed = 10.f; 

    while (window.isOpen())
    {
        switch (gameState)
        {
        case gameState::playing:
        {
            if (knight.Death())
            {
                gameState = gameState::paused;
            }

            float deltaTime = clock.restart().asSeconds();

            knight.update(deltaTime, tiles, enemies, arrows);

            // Update and draw all arrows globally
            for (auto it = arrows.begin(); it != arrows.end(); )
            {
                it->update(deltaTime, arrows, tiles);

                // Optionally check collision with tiles or mark it as stuck
                for (const auto& tile : tiles)
                {
                    if (tile.isCollidableTile() && it->getBounds().findIntersection(tile.getBounds()))
                    {
                        it->velocity = { 0.f, 0.f };
                        it->setArrowOnTile(true); // <-- if you added this function
                    }
                }

                if (it->isExpired())
                    it = arrows.erase(it);
                else
                    ++it;
            }



            for (auto& enemy : enemies)
            {
                Skeleton* skeleton = dynamic_cast<Skeleton*>(enemy.get());
                if (skeleton)
                {
                    if (!enemy->isDead())
                        skeleton->shootArrow(arrows, tiles, deltaTime); // Shoots arrow if needed
                }


                enemy->update(deltaTime, tiles, enemies);

            }


            sf::Vector2f knightPosition = knight.getKnightBox().getPosition();

            // Get current camera center
            sf::Vector2f center = view.getCenter();
            sf::Vector2f target = center; // Start with current center

            if (knightPosition.x > center.x + margin) {
                target.x = knightPosition.x - knightOffset;
            }
            // Knight moves left beyond margin
            else if (knightPosition.x < center.x - margin) {
                target.x = knightPosition.x + knightOffset;
            }

            // Clamp target.x within world bounds
            float halfWindowWidth = windowWidth / 2.f;
            if (target.x < halfWindowWidth)
                target.x = halfWindowWidth;
            if (target.x > worldWidth - halfWindowWidth)
                target.x = worldWidth - halfWindowWidth;

            // Smoothly move the current center toward the target
            center.x += (target.x - center.x) * lerpSpeed * deltaTime;
           

            float marginY = 100.f; // vertical margin buffer

            if (knight.getKnightBox().getGlobalBounds().position.y < 2000)
           {

                if (knightPosition.y > center.y + marginY) {
                    center.y = knightPosition.y - marginY;
                }
                else if (knightPosition.y < center.y - marginY) {
                    center.y = knightPosition.y + marginY;
                }

            }

            center.x = std::floor(center.x + 0.5f);
            center.y = std::floor(center.y + 0.5f);

            view.setCenter(center);
            window.setView(view);

            // Parallax background offset (based on camera, not player)
            float parallaxFactor = 0.1f;
            int textureWidth = background.getSize().x;

            int offsetX = static_cast<int>(center.x * parallaxFactor) % textureWidth;
            backgroundShape.setTextureRect(sf::IntRect({ offsetX, 0 }, { windowWidth, windowHeight }));
            backgroundShape.setPosition({ center.x - windowWidth / 2.f, center.y - windowHeight / 2.f });

            // knight.getAnimation()->setPosition(windowWidth / 2.f, windowHeight / 2.f);

            break;
        }
        case gameState::paused:


            break;
        }


        while (const std::optional event = window.pollEvent())
        {
            if (event->is<sf::Event::Closed>())
                window.close();

            
       

        }

    

        window.clear();

     //  for (auto& tile : knight.getTile()) {  // Assuming you have a getTiles function
       //     tile.draw(window); // Set position as necessary
      //  }

        window.draw(backgroundShape);

        

        for (auto& tile : tiles) {  
            tile.draw(window); 

        }

 
        knight.draw(window, tiles);

        for (auto& enemy : enemies)
        {
            enemy->draw(window);
        }
        
        for (const auto& arrow2 : arrows)
        {
            window.draw(arrow2.sprite);

         //   window.draw(arrow2.arrowBox);

        }
      
    
       knight.drawCollisionBox(window);

        window.display();
    }
}